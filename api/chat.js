// /api/chat.js ‚Äî G√©n√©ration 28 rubriques (OpenAI + garde-fous + canon Gen√®se 1)
// R√©ponse JSON: { ok, source: "openai"|"fallback"|"canonical", data:{ reference, version, sections:[{id,title,content}] }, warn? }

const MODEL = process.env.OPENAI_MODEL || "gpt-4o-mini";
const OPENAI_URL = "https://api.openai.com/v1/chat/completions";
const DEFAULT_VERSION = "LSG"; // Louis Segond 1910 par d√©faut

const TITLES = [
  "Pri√®re d‚Äôouverture","Canon et testament","Questions du chapitre pr√©c√©dent","Titre du chapitre",
  "Contexte historique","Structure litt√©raire","Genre litt√©raire","Auteur et g√©n√©alogie",
  "Verset-cl√© doctrinal","Analyse ex√©g√©tique","Analyse lexicale","R√©f√©rences crois√©es",
  "Fondements th√©ologiques","Th√®me doctrinal","Fruits spirituels","Types bibliques",
  "Appui doctrinal","Comparaison entre versets","Comparaison avec Actes 2","Verset √† m√©moriser",
  "Enseignement pour l‚Äô√âglise","Enseignement pour la famille","Enseignement pour enfants","Application missionnaire",
  "Application pastorale","Application personnelle","Versets √† retenir","Pri√®re de fin"
];
const N = TITLES.length;

// ---------------- Canonique pour Gen√®se 1 (ton texte exactement) ----------------
const CANON = {
  "Gen√®se|1": [
    // 1
    "Seigneur Tout-Puissant, Cr√©ateur du ciel et de la terre, √©claire ma lecture. Ouvre mon c≈ìur pour que je voie ta grandeur et que je re√ßoive la v√©rit√© de ta Parole avec humilit√© et ob√©issance. Amen.",
    // 2
    "La Gen√®se, traditionnellement attribu√©e √† Mo√Øse, a √©t√© donn√©e √† Isra√´l comme fondement de son identit√© et de sa foi. Gen√®se 1 se situe dans le Proche-Orient ancien, o√π de nombreux r√©cits pa√Øens d‚Äôorigine du monde circulaient. Ici, la diff√©rence est claire : un seul Dieu, souverain et personnel, cr√©e par sa Parole.",
    // 3
    "Le chapitre 1 est un prologue grandiose : il pr√©sente Dieu comme le Cr√©ateur absolu. Le texte est structur√© par r√©p√©titions (‚ÄúDieu dit‚Ä¶ il y eut un soir, il y eut un matin‚Äù), soulignant l‚Äôordre et l‚Äôintentionnalit√© de la cr√©ation.",
    // 4
    "Jour 1 : Lumi√®re et t√©n√®bres (vv. 1‚Äì5)\n\nJour 2 : Firmament, s√©paration des eaux (vv. 6‚Äì8)\n\nJour 3 : Terre et v√©g√©tation (vv. 9‚Äì13)\n\nJour 4 : Astres (vv. 14‚Äì19)\n\nJour 5 : Poissons et oiseaux (vv. 20‚Äì23)\n\nJour 6 : Animaux terrestres et l‚Äôhomme (vv. 24‚Äì31)\n\nJour 7 : Repos de Dieu (cf. Gen√®se 2:1-3)",
    // 5
    "Bara‚Äô (‚Äúcr√©er‚Äù) : r√©serv√© √† l‚Äôaction divine, marque une cr√©ation radicale.\n\nTohu-bohu (v.2) : d√©signe un √©tat de chaos avant l‚Äôorganisation divine.\n\nImage de Dieu (tselem Elohim) : exprime la dignit√© et la vocation unique de l‚Äôhomme.",
    // 6
    "Dieu : Cr√©ateur souverain.\n\nL‚Äôhomme et la femme : porteurs de l‚Äôimage divine, mandat√©s pour g√©rer la terre.",
    // 7
    "Dieu cr√©e l‚Äôunivers en six jours, en ordonnant le chaos. Chaque ≈ìuvre est d√©clar√©e ‚Äúbonne‚Äù. L‚Äôhomme et la femme sont cr√©√©s √† son image et re√ßoivent mandat sur la cr√©ation.",
    // 8
    "La cr√©ation est l‚Äô≈ìuvre d‚Äôun Dieu unique, sage et bon, qui √©tablit l‚Äôordre et conf√®re dignit√© √† l‚Äôhumanit√©.",
    // 9
    "Gen√®se 1:27\n\n¬´ Dieu cr√©a l‚Äôhomme √† son image, il le cr√©a √† l‚Äôimage de Dieu, il cr√©a l‚Äôhomme et la femme. ¬ª",
    // 10
    "Gen√®se 1:1\n\n¬´ Au commencement, Dieu cr√©a les cieux et la terre. ¬ª",
    // 11
    "Jean 1:1-3 ‚Äî Le Verbe comme Cr√©ateur.\n\nColossiens 1:16 ‚Äî Tout a √©t√© cr√©√© par et pour Christ.\n\nH√©breux 11:3 ‚Äî Le monde form√© par la Parole de Dieu.",
    // 12
    "Toute la r√©v√©lation biblique part de ce fondement : Dieu est Cr√©ateur. Apocalypse 21-22 boucle le r√©cit avec une nouvelle cr√©ation.",
    // 13
    "Il est la Parole cr√©atrice (Jean 1), le m√©diateur de la cr√©ation et de la r√©demption.",
    // 14
    "Quelle est ma valeur si je suis cr√©√© √† l‚Äôimage de Dieu ?\n\nComment puis-je refl√©ter cette image dans mon quotidien ?",
    // 15
    "Personnel : vivre avec gratitude et dignit√©.\n\nFamilial : transmettre aux enfants que Dieu est le Cr√©ateur.\n\n√âglise : affirmer la dignit√© humaine dans un monde relativiste.\n\nMissionnaire : annoncer que le monde a un sens et un Auteur.\n\nPastoral : accompagner ceux qui doutent de leur valeur.\n\nEnfants : enseigner la beaut√© de la cr√©ation comme don de Dieu.",
    // 16
    "Comme un artiste qui signe sa toile, Dieu a mis son empreinte en cr√©ant l‚Äôhomme √† son image.",
    // 17
    "¬´ La science contredit la Bible. ¬ª\n\n¬´ L‚Äô√©volution rend inutile l‚Äôid√©e de Cr√©ateur. ¬ª",
    // 18
    "La Bible n‚Äôest pas un manuel scientifique mais une r√©v√©lation th√©ologique. La science d√©crit le ‚Äúcomment‚Äù, la Parole r√©v√®le le ‚Äúpourquoi‚Äù.",
    // 19
    "Dieu b√©nit l‚Äôhomme et lui confie la cr√©ation (Gen√®se 1:28).",
    // 20
    "¬´ Soyez f√©conds, multipliez, remplissez la terre, et l‚Äôassujettissez. ¬ª (Gen√®se 1:28).",
    // 21
    "D√©velopper une √©cologie biblique : prendre soin de la cr√©ation en signe d‚Äôob√©issance √† Dieu.",
    // 22
    "üéµ ¬´ Seigneur, tu es digne ¬ª (hymne de louange √† Dieu Cr√©ateur, inspir√© d‚ÄôApocalypse 4:11).",
    // 23
    "P√®re Cr√©ateur, merci pour la vie et la dignit√© que tu m‚Äôas donn√©es. Aide-moi √† refl√©ter ton image, √† honorer ta cr√©ation et √† reconna√Ætre ton autorit√© sur tout. Amen.",
    // 24
    "Tout commence par Dieu.",
    // 25
    "Lire Jean 1 pour relier la cr√©ation au Christ, la Parole.",
    // 26
    "Le texte ne donne pas de d√©tails scientifiques. Il r√©v√®le l‚Äôordre divin et le but de l‚Äôexistence.",
    // 27
    "Gen√®se 1 fonde notre vision du monde : Dieu est Cr√©ateur, l‚Äôhomme est son image, et la cr√©ation est bonne. Ces v√©rit√©s orientent notre foi, notre mission et notre esp√©rance.",
    // 28
    "‚Äî" // laiss√© vide volontairement si tu veux compl√©ter (mais on garde 28 items)
  ]
};

// Le texte fourni a 28 items logiques mais ne mappe pas 1:1 avec nos 28 titres standards.
// On reconstruit une correspondance propre ci-dessous :
function canonicalGenesis1Sections() {
  const S = new Array(28).fill("");
  // Mapping vers TITLES (1..28)
  S[0]  = CANON["Gen√®se|1"][0]; // Pri√®re d‚Äôouverture
  S[1]  = CANON["Gen√®se|1"][1]; // Canon et testament (contextualis√©)
  S[2]  = "Pr√©parer au moins 5 questions de r√©vision sur le chapitre pr√©c√©dent (comprendre, appliquer, comparer, retenir).";
  S[3]  = "Gen√®se 1 ‚Äî Dieu cr√©e par sa Parole : titre doctrinal synth√©tique.";
  S[4]  = CANON["Gen√®se|1"][1]; // Contexte historique (d√©j√† mentionn√©)
  S[5]  = CANON["Gen√®se|1"][3]; // Structure des jours 1..7
  S[6]  = "Narratif th√©ologique solennel (prologue de la Gen√®se).";
  S[7]  = "Tradition : Mo√Øse ; rattachement aux patriarches ; transmission √† Isra√´l.";
  S[8]  = CANON["Gen√®se|1"][8]; // Verset-cl√© doctrinal (1:27)
  S[9]  = "bara‚Äô (cr√©er) r√©serv√© √† Dieu ; refrain ¬´ Dieu dit‚Ä¶ il y eut un soir, il y eut un matin ¬ª ; ordonnancement progressif.";
  S[10] = CANON["Gen√®se|1"][4]; // Lexicale : bara‚Äô, tohu-bohu, tselem Elohim
  S[11] = CANON["Gen√®se|1"][10]; // R√©f√©rences crois√©es
  S[12] = "Dieu unique, souverain et bon ; dignit√© humaine ; mandat culturel ; repos/sabbat.";
  S[13] = CANON["Gen√®se|1"][7];  // Th√®me doctrinal central
  S[14] = "Gratitude, adoration, responsabilit√©, esp√©rance.";
  S[15] = "Typologies : repos/sabbat ; ordre/chaos ; Parole/lumi√®re.";
  S[16] = "Psaume 8 ; Psaume 104 ; Apocalypse 4:11 ; H√©breux 11:3.";
  S[17] = "Comparer 1:1 ; 1:27 ; 1:31 ; 2:1-3 (ouverture, image, bont√©, repos).";
  S[18] = "Avec Actes 2 : Parole, communaut√©, Esprit ‚Äî nouvelle cr√©ation inaugur√©e.";
  S[19] = "Gen√®se 1:1 ou 1:27 ‚Äî courte citation (LSG).";
  S[20] = "Affirmations pour l‚Äô√âglise : Cr√©ateur, dignit√©, sabbat, mission.";
  S[21] = "Famille : transmettre que Dieu est Cr√©ateur ; √©ducation √† la g√©rance.";
  S[22] = "Enfants : Dieu a tout fait ; nous sommes pr√©cieux ; prenons soin de la terre.";
  S[23] = "Mission : annoncer que le monde a un Auteur et un sens ; relier au Christ.";
  S[24] = "Pastoral : accompagner ceux qui doutent de leur valeur ; √©cologie biblique.";
  S[25] = "Examen personnel : o√π je m√©prise la cr√©ation ou l‚Äôimage de Dieu ? D√©cisions concr√®tes.";
  S[26] = "Gen√®se 1:1 ; 1:27 ; 1:28 ; Psaume 8 ; Jean 1:3.";
  S[27] = "P√®re Cr√©ateur, merci pour la vie et la dignit√©‚Ä¶ Amen.";
  return S;
}

// ---------------- Utils HTTP ----------------
function setNoStore(res) {
  res.setHeader("Content-Type", "application/json; charset=utf-8");
  res.setHeader("Cache-Control", "no-store, no-cache, must-revalidate");
  res.setHeader("Pragma", "no-cache");
  res.setHeader("Expires", "0");
  res.setHeader("CDN-Cache-Control", "no-store");
  res.setHeader("Vercel-CDN-Cache-Control", "no-store");
}
function ok(res, payload) { setNoStore(res); res.statusCode = 200; res.end(JSON.stringify(payload)); }
function fail(res, status, message){ setNoStore(res); res.statusCode = status||500; res.end(JSON.stringify({ ok:false, error:String(message||"Internal error") })); }

// ---------------- Helpers ----------------
function parseQ(q){ if(!q) return {book:"",chapter:NaN}; const m=String(q).match(/^(.+?)\s+(\d+)\s*$/); return m?{book:m[1].trim(),chapter:Number(m[2])}:{book:String(q).trim(),chapter:NaN}; }
function toSections(reference, version, blocks){
  return {
    reference, version,
    sections: blocks.map((content,i)=>({ id:i+1, title:TITLES[i], content:String(content||"").trim() }))
  };
}

// ---------------- Fallback g√©n√©rique ----------------
function fallbackBlocks(book,chapter,version){
  const ref = `${book} ${chapter}`;
  return [
    `P√®re c√©leste, nous venons devant toi pour lire ${ref}. Ouvre nos c≈ìurs par ton Saint-Esprit, √©claire notre intelligence et conduis-nous dans la v√©rit√©. Au nom de J√©sus, amen.`,
    `Le livre de ${book} appartient au canon biblique (Ancien/Nouveau Testament).`,
    `Pr√©parer au moins 5 questions de r√©vision sur le chapitre pr√©c√©dent (comprendre, appliquer, comparer, retenir).`,
    `${ref} ‚Äî Titre doctrinal synth√©tique.`,
    `Contexte : auteur traditionnel, √©poque, destinataires, enjeux.`,
    `Structure interne du chapitre (p√©r√©copes, refrains, progression).`,
    `Genre litt√©raire et incidences herm√©neutiques.`,
    `Auteur & rattachements (tradition) / g√©n√©alogie.`,
    `Verset-cl√©: ${ref}:1 ‚Äî courte citation (${version}).`,
    `Analyse ex√©g√©tique : observations (verbes, connecteurs, parall√®les).`,
    `Analyse lexicale : mots cl√©s (h√©breu/grec), port√©e doctrinale.`,
    `R√©f√©rences crois√©es : 3‚Äì5 passages parall√®les ou √©clairants.`,
    `Fondements : attributs divins, cr√©ation/chute/r√©demption, alliance.`,
    `Th√®me doctrinal principal (formul√© clairement).`,
    `Fruits : louange, repentance, ob√©issance, charit√©, esp√©rance.`,
    `Types bibliques et figures christologiques.`,
    `Appui doctrinal : autres passages qui confirment.`,
    `Comparaison interne : versets en tension ou en √©cho.`,
    `Comparaison avec Actes 2 : Parole, Esprit, communaut√©.`,
    `Verset √† m√©moriser: ${ref}:1 ‚Äî courte citation (${version}).`,
    `Implications pour l‚Äô√âglise locale.`,
    `Implications pour la famille.`,
    `Version enfants : r√©cit simple + 2 questions.`,
    `Application missionnaire : annonce, justice, mis√©ricorde.`,
    `Application pastorale : accompagnement, exhortation.`,
    `Application personnelle : examen et d√©cisions concr√®tes.`,
    `Versets √† retenir : 3‚Äì5 r√©f√©rences du chapitre.`,
    `Pri√®re finale : merci pour ${ref}, aide-nous √† pratiquer ta Parole.`
  ];
}

// ---------------- Qualit√© minimale (heuristiques) ----------------
function isGoodForGenesis1(book,chapter,sections){
  if(book!=="Gen√®se" || Number(chapter)!==1) return true; // on ne teste finement que Gen√®se 1
  const byId = Object.fromEntries(sections.map(s=>[s.id, s.content || ""]));
  const need = [
    [5, /Proche[- ]?Orient/i],                 // contexte historique
    [6, /Jour\s*1|Jour\s*2|Jour\s*3|Jour\s*4|Jour\s*5|Jour\s*6|Jour\s*7/i], // structure 7 jours
    [10, /bara|tohu|tselem|image de Dieu/i],    // ex√©g√®se
    [11, /lexic|mot/i],                         // lexicale
    [12, /Jean\s*1|Colossiens\s*1|H[√©e]breux\s*11/i], // refs crois√©es
    [20, /Gen[√®e]se\s*1:\d+/i]                  // verset √† m√©moriser
  ];
  let pass = 0;
  for(const [id, re] of need){
    if(re.test(byId[id]||"")) pass++;
  }
  return pass >= 4; // seuil
}

// ---------------- OpenAI ----------------
async function askOpenAI({ book, chapter, version, apiKey }){
  const SYSTEM = `
Tu es un assistant pastoral francophone. R√©ponds STRICTEMENT en JSON avec 28 cha√Ænes "s1".."s28".
- 3‚Äì6 phrases par rubrique, concises et doctrinales (pas un simple collage de versets).
- Respecte l'ordre exact des 28 rubriques ci-dessous.
- Pour s9 (Verset-cl√© doctrinal) et s20 (Verset √† m√©moriser), inclure "R√©f√©rence + courte citation" (${version}).
Rubriques:
${TITLES.map((t,i)=>`- s${i+1} = "${t}"`).join("\n")}
`.trim();

  const USER = `Livre="${book}", Chapitre="${chapter}", Version="${version}".`;

  const payload = {
    model: MODEL,
    temperature: 0.35,
    max_tokens: 1600,
    response_format: { type:"json_object" },
    messages: [
      { role:"system", content: SYSTEM },
      { role:"user", content: USER }
    ]
  };

  const r = await fetch(OPENAI_URL, {
    method:"POST",
    headers:{ "Authorization":`Bearer ${apiKey}`, "Content-Type":"application/json" },
    body: JSON.stringify(payload)
  });
  const raw = await r.text();
  if(!r.ok) throw new Error(`OpenAI ${r.status}: ${raw.slice(0,300)}`);

  let outer; try{ outer = JSON.parse(raw); }catch{ throw new Error("OpenAI: JSON global invalide"); }
  const content = outer?.choices?.[0]?.message?.content || "";
  let obj; try{ obj = JSON.parse(content); }catch{ throw new Error("OpenAI: contenu non-JSON strict"); }

  const blocks = [];
  for(let i=1;i<=N;i++){
    const v = obj[`s${i}`];
    if(typeof v !== "string") throw new Error(`OpenAI: champ manquant s${i}`);
    blocks.push(v);
  }
  return blocks;
}

// ---------------- Handler ----------------
export default async function handler(req,res){
  try{
    // CORS minimal + no-store
    res.setHeader("Access-Control-Allow-Origin","*");
    if(req.method==="OPTIONS"){
      res.setHeader("Access-Control-Allow-Methods","GET,POST,OPTIONS");
      res.setHeader("Access-Control-Allow-Headers","Content-Type");
      return res.status(204).end();
    }
    setNoStore(res);

    // body JSON si POST
    let body={};
    if(req.method==="POST"){
      body = await new Promise(resolve=>{
        let b=""; req.on("data",c=>b+=c);
        req.on("end",()=>{ try{ resolve(JSON.parse(b||"{}")); }catch{ resolve({}); } });
      });
    }

    const url = new URL(req.url, `http://${req.headers.host}`);
    const qp  = Object.fromEntries(url.searchParams.entries());
    const probe = qp.probe === "1" || body.probe === true;

    // param√®tres
    let book    = (body.book || qp.book || "").trim();
    let chapter = Number(body.chapter || qp.chapter);
    let version = (body.version || qp.version || DEFAULT_VERSION).trim() || DEFAULT_VERSION;

    const q = body.q || qp.q;
    if((!book || !chapter) && q){ const p=parseQ(q); book=book||p.book; chapter=chapter||p.chapter; }
    if(!book) book="Gen√®se";
    if(!Number.isFinite(chapter) || chapter<=0) chapter=1;

    const reference = `${book} ${chapter}`;

    // probe => retourne fallback g√©n√©rique (ou canon si Gen√®se 1) en JSON
    if(probe){
      if(CANON[`${book}|${chapter}`]){
        const blocks = canonicalGenesis1Sections();
        return ok(res, { ok:true, source:"canonical", data: toSections(reference, version, blocks) });
      }
      return ok(res, { ok:true, source:"fallback", data: toSections(reference, version, fallbackBlocks(book,chapter,version)) });
    }

    const apiKey = (process.env.OPENAI_API_KEY||"").trim();
    let blocks=null, source="fallback", warn="";

    if(apiKey){
      try{
        const out = await askOpenAI({ book, chapter, version, apiKey });
        blocks = out;
        source = "openai";
      }catch(e){
        warn = `OpenAI: ${String(e?.message||e)}`;
      }
    } else {
      warn = "OPENAI_API_KEY manquant";
    }

    // Si livre=Gen√®se chap=1 et que la qualit√© n'est pas au niveau ‚Üí canon garanti
    if(CANON[`${book}|${chapter}`]){
      if(!blocks){
        const canon = canonicalGenesis1Sections();
        return ok(res, { ok:true, source:"canonical", warn, data: toSections(reference, version, canon) });
      } else {
        const sections = toSections(reference, version, blocks).sections;
        if(!isGoodForGenesis1(book,chapter,sections)){
          const canon = canonicalGenesis1Sections();
          return ok(res, { ok:true, source:"canonical", warn:"AI content adjusted to canonical", data: toSections(reference, version, canon) });
        }
      }
    }

    // Autres chapitres ‚Üí si pas d'AI, fallback g√©n√©rique
    if(!blocks) {
      const fb = fallbackBlocks(book,chapter,version);
      return ok(res, { ok:true, source:"fallback", warn, data: toSections(reference, version, fb) });
    }

    // AI OK
    return ok(res, { ok:true, source, warn, data: toSections(reference, version, blocks) });

  }catch(e){
    return fail(res, 500, e?.message || e);
  }
}
