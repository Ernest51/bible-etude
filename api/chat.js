// api/chat.js ‚Äî Route Vercel robuste (Markdown 28 rubriques) ‚úî
// - POST { book, chapter, version } OU GET ?q="Gen√®se 1"
// - Utilise OpenAI si OPENAI_API_KEY est d√©fini, sinon renvoie un fallback Markdown propre
// - Jamais d'erreur 500 silencieuse: retourne un message clair en text/plain
// - ?probe=1 pour test rapide (sans OpenAI)

import OpenAI from "openai";

// ----- Canevas 28 rubriques -----
const TITLES = [
  "1. Ouverture en pri√®re",
  "2. Contexte historique",
  "3. Contexte litt√©raire",
  "4. Structure du passage",
  "5. Analyse ex√©g√©tique et lexicale",
  "6. Personnages principaux",
  "7. R√©sum√© du chapitre",
  "8. Th√®me th√©ologique central",
  "9. V√©rit√© spirituelle principale",
  "10. Verset-cl√© doctrinal",
  "11. Verset √† m√©moriser",
  "12. R√©f√©rences crois√©es",
  "13. Liens avec le reste de la Bible",
  "14. J√©sus-Christ dans ce passage",
  "15. Questions de r√©flexion",
  "16. Applications pratiques",
  "17. Illustration",
  "18. Objections courantes",
  "19. R√©ponses",
  "20. Promesse de Dieu",
  "21. Commandement de Dieu",
  "22. Application communautaire",
  "23. Hymne ou chant sugg√©r√©",
  "24. Pri√®re finale",
  "25. Pens√©e cl√© du jour",
  "26. Plan de lecture associ√©",
  "27. Limites et exceptions",
  "28. Conclusion",
];

const TEMPLATE = `# {{BOOK}} {{CHAP}}

1. Ouverture en pri√®re

{{S1}}

2. Contexte historique

{{S2}}

3. Contexte litt√©raire

{{S3}}

4. Structure du passage

{{S4}}

5. Analyse ex√©g√©tique et lexicale

{{S5}}

6. Personnages principaux

{{S6}}

7. R√©sum√© du chapitre

{{S7}}

8. Th√®me th√©ologique central

{{S8}}

9. V√©rit√© spirituelle principale

{{S9}}

10. Verset-cl√© doctrinal

{{S10REF}}
{{S10}}

11. Verset √† m√©moriser

{{S11REF}}
{{S11}}

12. R√©f√©rences crois√©es

{{S12}}

13. Liens avec le reste de la Bible

{{S13}}

14. J√©sus-Christ dans ce passage

{{S14}}

15. Questions de r√©flexion

{{S15}}

16. Applications pratiques

{{S16}}

17. Illustration

{{S17}}

18. Objections courantes

{{S18}}

19. R√©ponses

{{S19}}

20. Promesse de Dieu

{{S20}}

21. Commandement de Dieu

{{S21}}

22. Application communautaire

{{S22}}

23. Hymne ou chant sugg√©r√©

{{S23}}

24. Pri√®re finale

{{S24}}

25. Pens√©e cl√© du jour

{{S25}}

26. Plan de lecture associ√©

{{S26}}

27. Limites et exceptions

{{S27}}

28. Conclusion

{{S28}}`.trim();

function parseQ(q) {
  if (!q) return { book: "", chapter: NaN };
  const m = String(q).match(/^(.+?)\s+(\d+)\s*$/);
  if (m) return { book: m[1].trim(), chapter: Number(m[2]) };
  return { book: q.trim(), chapter: NaN };
}

function youVersionLink(book, chapter) {
  const map = {
    "Gen√®se": "GEN","Exode":"EXO","L√©vitique":"LEV","Nombres":"NUM","Deut√©ronome":"DEU",
    "Josu√©":"JOS","Juges":"JDG","Ruth":"RUT","1 Samuel":"1SA","2 Samuel":"2SA",
    "1 Rois":"1KI","2 Rois":"2KI","1 Chroniques":"1CH","2 Chroniques":"2CH",
    "Esdras":"EZR","N√©h√©mie":"NEH","Esther":"EST","Job":"JOB","Psaumes":"PSA",
    "Proverbes":"PRO","Eccl√©siaste":"ECC","Cantique des cantiques":"SNG","√âsa√Øe":"ISA",
    "J√©r√©mie":"JER","Lamentations":"LAM","√âz√©chiel":"EZK","Daniel":"DAN",
    "Os√©e":"HOS","Jo√´l":"JOL","Amos":"AMO","Abdias":"OBA","Jonas":"JON",
    "Mich√©e":"MIC","Nahoum":"NAM","Habacuc":"HAB","Sophonie":"ZEP","Agg√©e":"HAG",
    "Zacharie":"ZEC","Malachie":"MAL",
    "Matthieu":"MAT","Marc":"MRK","Luc":"LUK","Jean":"JHN","Actes":"ACT",
    "Romains":"ROM","1 Corinthiens":"1CO","2 Corinthiens":"2CO","Galates":"GAL","√âph√©siens":"EPH",
    "Philippiens":"PHP","Colossiens":"COL","1 Thessaloniciens":"1TH","2 Thessaloniciens":"2TH","1 Timoth√©e":"1TI",
    "2 Timoth√©e":"2TI","Tite":"TIT","Phil√©mon":"PHM","H√©breux":"HEB","Jacques":"JAS",
    "1 Pierre":"1PE","2 Pierre":"2PE","1 Jean":"1JN","2 Jean":"2JN","3 Jean":"3JN",
    "Jude":"JUD","Apocalypse":"REV"
  };
  const code = map[book];
  return code ? `https://www.bible.com/fr/bible/93/${code}.${chapter}.LSG` : "";
}

function fallbackMarkdown(book, chapter) {
  const ref = `${book} ${chapter}`;
  const link = youVersionLink(book, chapter) || "‚Äî";
  const fill = (s) => s || "‚Äî";
  const md = TEMPLATE
    .replace("{{BOOK}}", book).replace("{{CHAP}}", String(chapter))
    .replace("{{S1}}", `Seigneur Tout-Puissant, √©claire ma lecture de ${ref}. Amen.`)
    .replace("{{S2}}", "Contexte historique synth√©tique √† compl√©ter.")
    .replace("{{S3}}", "Contexte litt√©raire (structure, r√©p√©titions, genre).")
    .replace("{{S4}}", "Rep√®re les unit√©s du passage et leurs versets.")
    .replace("{{S5}}", "Termes cl√©s (h√©breu/grec), port√©e doctrinale.")
    .replace("{{S6}}", "Dieu, personnages, destinataires.")
    .replace("{{S7}}", "R√©sum√© bref et fid√®le du chapitre.")
    .replace("{{S8}}", "Id√©e th√©ologique dominante.")
    .replace("{{S9}}", "Application identitaire/esp√©rance/adoration.")
    .replace("{{S10REF}}", `${book} ${chapter}:1`)
    .replace("{{S10}}", "¬´ ‚Ä¶ ¬ª (LSG)")
    .replace("{{S11REF}}", `${book} ${chapter}:1`)
    .replace("{{S11}}", "¬´ ‚Ä¶ ¬ª (LSG)")
    .replace("{{S12}}", `YouVersion : ${link}`)
    .replace("{{S13}}", "Fils rouges de la Bible reli√©s au passage.")
    .replace("{{S14}}", "Christ comme Parole/Cr√©ateur/R√©dempteur (selon passage).")
    .replace("{{S15}}", "Deux ou trois questions concr√®tes.")
    .replace("{{S16}}", "Pistes personnelles, familiales, √©glise, mission.")
    .replace("{{S17}}", "Petite image/analogie m√©morable.")
    .replace("{{S18}}", "Objection fr√©quente 1 / 2.")
    .replace("{{S19}}", "R√©ponse br√®ve, honn√™te, biblique.")
    .replace("{{S20}}", "Promesse explicite/implicite du texte.")
    .replace("{{S21}}", "Commandement/appel du texte.")
    .replace("{{S22}}", "Action communautaire/√©cologie biblique/etc.")
    .replace("{{S23}}", "üéµ Chant/hymne sugg√©r√©.")
    .replace("{{S24}}", "Pri√®re de cl√¥ture.")
    .replace("{{S25}}", "Formule courte m√©morisable.")
    .replace("{{S26}}", "Lecture associ√©e (p.ex. Jean 1).")
    .replace("{{S27}}", "Ce que le texte ne traite pas (cadre, limites).")
    .replace("{{S28}}", "Synth√®se finale.");
  return md.split("{{").map(fill).join(""); // safety no-op
}

function ok28(md, book, chapter) {
  if (!md || !md.startsWith(`# ${book} ${chapter}`)) return false;
  return TITLES.every(t => md.includes(t));
}

export default async function handler(req, res) {
  try {
    // --- M√©thode + param√®tres ---
    const method = req.method || "GET";
    let body = {};
    if (method === "POST") {
      body = await new Promise((resolve) => {
        let b = "";
        req.on("data", (c) => (b += c));
        req.on("end", () => {
          try { resolve(JSON.parse(b || "{}")); } catch { resolve({}); }
        });
      });
    }
    const url = new URL(req.url, `http://${req.headers.host}`);
    const qp = Object.fromEntries(url.searchParams.entries());
    const probe = qp.probe === "1" || body.probe === true;

    let book = body.book || qp.book, chapter = Number(body.chapter || qp.chapter);
    const q = body.q || qp.q;
    if ((!book || !chapter) && q) {
      const p = parseQ(q);
      book = book || p.book;
      chapter = chapter || p.chapter;
    }
    if (probe) {
      const b = book || "Gen√®se", c = chapter || 1;
      const md = fallbackMarkdown(b, c);
      res.setHeader("Content-Type", "text/markdown; charset=utf-8");
      return res.status(200).send(md);
    }
    if (!book || !chapter) {
      return res.status(400).send("Param√®tres manquants: envoyez { book, chapter } ou { q }.");
    }

    // --- Si pas de cl√© OpenAI ‚Üí fallback propre (pas d'√©chec) ---
    const haveKey = !!process.env.OPENAI_API_KEY;
    if (!haveKey) {
      const md = fallbackMarkdown(book, chapter);
      res.setHeader("Content-Type", "text/markdown; charset=utf-8");
      res.setHeader("Content-Disposition", `inline; filename="${book}-${chapter}.md"`);
      return res.status(200).send(md);
    }

    // --- Appel OpenAI (avec garde-fous) ---
    const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

    const SYSTEM = `
Tu produis des √©tudes bibliques **strictement** en Markdown, 28 rubriques num√©rot√©es.
Contraintes:
- Utilise EXACTEMENT ces titres et cet ordre: ${TITLES.join(" | ")}.
- Pas de texte hors canevas.
- Version biblique pour citations: Louis Segond 1910 (LSG).
- 3‚Äì6 phrases par rubrique en moyenne, style pastoral et pr√©cis.
`.trim();

    const link = youVersionLink(book, chapter) || "‚Äî";

    const USER = `
Remplis le gabarit suivant pour Livre="${book}", Chapitre="${chapter}" (LSG).
Ajoute si pertinent "YouVersion : ${link}" dans la rubrique ad√©quate (10/11/12/26).

GABARIT:
${TEMPLATE}
`.trim();

    let md = "";
    try {
      const rsp = await client.chat.completions.create({
        model: "gpt-4o-mini",
        temperature: 0.4,
        max_tokens: 2200,
        messages: [
          { role: "system", content: SYSTEM },
          { role: "user", content: USER },
        ],
      });
      md = (rsp?.choices?.[0]?.message?.content || "").trim();
    } catch (e) {
      // Erreur OpenAI ‚Üí fallback explicite mais sans 500
      const fb = fallbackMarkdown(book, chapter);
      res.setHeader("Content-Type", "text/markdown; charset=utf-8");
      res.setHeader("X-OpenAI-Error", String(e?.message || e));
      return res.status(200).send(fb);
    }

    // V√©rification format 28 rubriques
    if (!ok28(md, book, chapter)) {
      const fb = fallbackMarkdown(book, chapter);
      res.setHeader("Content-Type", "text/markdown; charset=utf-8");
      res.setHeader("X-Format-Note", "Gabarit partiel: envoi fallback");
      return res.status(200).send(fb);
    }

    // OK
    res.setHeader("Content-Type", "text/markdown; charset=utf-8");
    res.setHeader("Content-Disposition", `inline; filename="${book}-${chapter}.md"`);
    return res.status(200).send(md);
  } catch (e) {
    // Dernier filet: ne pas planter en 500 opaque
    try {
      const url = new URL(req.url, `http://${req.headers.host}`);
      const q = url.searchParams.get("q") || "";
      const p = parseQ(q);
      const book = p.book || "Gen√®se";
      const chapter = p.chapter || 1;
      const md = fallbackMarkdown(book, chapter);
      res.setHeader("Content-Type", "text/markdown; charset=utf-8");
      res.setHeader("X-Last-Error", String(e?.message || e));
      return res.status(200).send(md);
    } catch {
      res.setHeader("Content-Type", "text/plain; charset=utf-8");
      return res.status(500).send("Erreur interne finale.");
    }
  }
}
